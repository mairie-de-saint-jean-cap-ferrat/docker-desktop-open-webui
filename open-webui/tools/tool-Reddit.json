[{"id":"305c2886-d7a5-48bf-820a-d2a35c77b6a9","userId":"f42a495c-f5f6-4187-85cb-3a07467d7b68","tool":{"id":"reddit","name":"Reddit","meta":{"description":"Gets popular subreddit posts or user profile content from Reddit","manifest":{"title":"Reddit","author":"@nathanwindisch","author_url":"https://git.wnd.sh/owui-tools/reddit","funding_url":"https://patreon.com/NathanWindisch","version":"0.0.1","changelog":""}},"content":"\"\"\"\ntitle: Reddit\nauthor: @nathanwindisch\nauthor_url: https://git.wnd.sh/owui-tools/reddit\nfunding_url: https://patreon.com/NathanWindisch\nversion: 0.0.1\nchangelog:\n- 0.0.1 - Initial upload to openwebui community.\n- 0.0.2 - Renamed from \"Reddit Feeds\" to just \"Reddit\".\n- 0.0.3 - Updated author_url in docstring to point to \n          git repo.\n\"\"\"\n\n\nimport re\nimport json\nimport requests\nfrom typing import Awaitable, Callable\nfrom pydantic import BaseModel, Field\nfrom requests.models import Response\n\n\ndef parse_reddit_page(response: Response):\n\tdata = json.loads(response.content)\n\toutput = []\n\tif \"data\" not in data: return output\n\tif \"children\" not in data[\"data\"]: return output\n\tfor item in data[\"data\"][\"children\"]: output.append(item)\n\treturn output\n\n\ndef parse_posts(data: list):\n\tposts = []\n\tfor item in data:\n\t\tif item[\"kind\"] != \"t3\": continue\n\t\titem = item[\"data\"]\n\t\tposts.append({\n\t\t\t\"id\": item[\"name\"],\n\t\t\t\"title\": item[\"title\"],\n\t\t\t\"description\": item[\"selftext\"],\n\t\t\t\"link\": item[\"url\"],\n\n\t\t\t\"author_username\": item[\"author\"],\n\t\t\t\"author_id\": item[\"author_fullname\"],\n\t\t\t\"subreddit_name\": item[\"subreddit\"],\n\t\t\t\"subreddit_id\": item[\"subreddit_id\"],\n\t\t\t\"subreddit_subscribers\": item[\"subreddit_subscribers\"],\n\n\t\t\t\"score\": item[\"score\"],\n\t\t\t\"upvotes\": item[\"ups\"],\n\t\t\t\"downvotes\": item[\"downs\"],\n\t\t\t\"upvote_ratio\": item[\"upvote_ratio\"],\n\t\t\t\"total_comments\": item[\"num_comments\"],\n\t\t\t\"total_crossposts\": item[\"num_crossposts\"],\n\t\t\t\"total_awards\": item[\"total_awards_received\"],\n\t\t\t\"domain\": item[\"domain\"],\n\t\t\t\"flair_text\": item[\"link_flair_text\"],\n\t\t\t\"media_embed\": item[\"media_embed\"],\n\n\t\t\t\"is_pinned\": item[\"pinned\"],\n\t\t\t\"is_self\": item[\"is_self\"],\n\t\t\t\"is_video\": item[\"is_video\"],\n\t\t\t\"is_media_only\": item[\"media_only\"],\n\t\t\t\"is_over_18\": item[\"over_18\"],\n\t\t\t\"is_edited\": item[\"edited\"],\n\t\t\t\"is_hidden\": item[\"hidden\"],\n\t\t\t\"is_archived\": item[\"archived\"],\n\t\t\t\"is_locked\": item[\"locked\"],\n\t\t\t\"is_quarantined\": item[\"quarantine\"],\n\t\t\t\"is_spoiler\": item[\"spoiler\"],\n\t\t\t\"is_stickied\": item[\"stickied\"],\n\t\t\t\"is_send_replies\": item[\"send_replies\"],\n\n\t\t\t\"published_at\": item[\"created_utc\"],\n\t\t})\n\treturn posts\n\n\ndef parse_comments(data: list):\n\tcomments = []\n\tfor item in data:\n\t\tif item[\"kind\"] != \"t1\": continue\n\t\titem = item[\"data\"]\n\t\tcomments.append({\n\t\t\t\"id\": item[\"name\"],\n\t\t\t\"body\": item[\"body\"],\n\t\t\t\"link\": item[\"permalink\"],\n\t\t\t\"post_id\": item[\"link_id\"],\n\t\t\t\"post_title\": item[\"link_title\"],\n\t\t\t\"post_link\": item[\"link_permalink\"],\n\n\t\t\t\"author_username\": item[\"author\"],\n\t\t\t\"author_id\": item[\"author_fullname\"],\n\t\t\t\"subreddit_name\": item[\"subreddit\"],\n\t\t\t\"subreddit_id\": item[\"subreddit_id\"],\n\n\t\t\t\"score\": item[\"score\"],\n\t\t\t\"upvotes\": item[\"ups\"],\n\t\t\t\"downvotes\": item[\"downs\"],\n\t\t\t\"total_comments\": item[\"num_comments\"],\n\t\t\t\"total_awards\": item[\"total_awards_received\"],\n\t\t\t\"is_edited\": item[\"edited\"],\n\t\t\t\"is_archived\": item[\"archived\"],\n\t\t\t\"is_locked\": item[\"locked\"],\n\t\t\t\"is_quarantined\": item[\"quarantine\"],\n\t\t\t\"is_stickied\": item[\"stickied\"],\n\t\t\t\"is_send_replies\": item[\"send_replies\"],\n\t\t\t\"published_at\": item[\"created_utc\"],\n\t\t})\n\treturn comments\n\n\nclass Tools:\n\tdef __init__(self): pass\n\n\tclass UserValves(BaseModel):\n\t\tUSER_AGENT: str = Field(\n\t\t\tdefault=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36\",\n\t\t\tdescription=\"The user agent to use when making requests to Reddit.\"\n\t\t)\n\n\tasync def get_subreddit_feed(\n\t\tself,\n\t\tsubreddit: str,\n\t\t__event_emitter__: Callable[[dict], Awaitable[None]],\n\t\t__user__: dict = {},\n\t) -> str:\n\t\t\"\"\"\n\t\tGet the latest posts from a subreddit, as an array of JSON objects with the following properties: 'id', 'title', 'description', 'link', 'author_username', 'author_id', 'subreddit_name', 'subreddit_id', 'subreddit_subscribers', 'score', 'upvotes', 'downvotes', 'upvote_ratio', 'total_comments', 'total_crossposts', 'total_awards', 'domain', 'flair_text', 'media_embed', 'is_pinned', 'is_self', 'is_video', 'is_media_only', 'is_over_18', 'is_edited', 'is_hidden', 'is_archived', 'is_locked', 'is_quarantined', 'is_spoiler', 'is_stickied', 'is_send_replies', 'published_at'.\n\t\t:param subreddit: The subreddit to get the latest posts from.\n\t\t:return: A list of posts with the previously mentioned properties, or an error message.\n\t\t\"\"\"\n\t\theaders = { \"User-Agent\": __user__[\"valves\"].USER_AGENT }\n\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Starting retrieval for r/{subreddit}'s Reddit Feed...\", \"status\": \"in_progress\", \"done\": False }, \"type\": \"status\" })\n\n\t\tif subreddit == \"\":\n\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Error: No subreddit provided.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\treturn \"Error: No subreddit provided\"\n\t\tsubreddit = subreddit.replace(\"/r/\", \"\").replace(\"r/\", \"\")\n\n\t\tif not re.match(r\"^[A-Za-z0-9_]{2,21}$\", subreddit):\n\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Error: Invalid subreddit name '{subreddit}' (either too long or two short).\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\treturn \"Error: Invalid subreddit name\"\n\n\t\ttry:\n\t\t\tresponse = requests.get(f\"https://reddit.com/r/{subreddit}.json\", headers=headers)\n\n\t\t\tif not response.ok:\n\t\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Error: Failed to retrieve r/{subreddit}'s Reddit Feed: {response.status_code}.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\t\treturn f\"Error: {response.status_code}\"\n\t\t\telse:\n\t\t\t\toutput = parse_posts(parse_reddit_page(response))\n\t\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Retrieved {len(output)} posts from r/{subreddit}'s Reddit Feed.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\t\treturn json.dumps(output)\n\t\texcept Exception as e:\n\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Failed to retrieve any posts from r/{subreddit}'s Reddit Feed: {e}.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\treturn f\"Error: {e}\"\n\n\n\tasync def get_user_feed(\n\t\tself,\n\t\tusername: str,\n\t\t__event_emitter__: Callable[[dict], Awaitable[None]],\n\t\t__user__: dict = {},\n\t) -> str:\n\t\t\"\"\"\n\t\tGet the latest posts from a given user, as a JSON object with an array of 'post' objects with the following properties: 'id', 'title', 'description', 'link', 'author_username', 'author_id', 'subreddit_name', 'subreddit_id', 'subreddit_subscribers', 'score', 'upvotes', 'downvotes', 'upvote_ratio', 'total_comments', 'total_crossposts', 'total_awards', 'domain', 'flair_text', 'media_embed', 'is_pinned', 'is_self', 'is_video', 'is_media_only', 'is_over_18', 'is_edited', 'is_hidden', 'is_archived', 'is_locked', 'is_quarantined', 'is_spoiler', 'is_stickied', 'is_send_replies', 'published_at'.\n\t\tAdditionally, the resultant object will also contain an array of 'comment' objects with the following properties: 'id', 'body', 'link', 'post_id', 'post_title', 'post_link', 'author_id', 'post_author_username', 'subreddit_name', 'subreddit_id', 'subreddit_subscribers', 'score', 'upvotes', 'downvotes', 'total_comments', 'total_awards', 'is_edited', 'is_archived', 'is_locked', 'is_quarantined', 'is_stickied', 'is_send_replies', 'published_at'.\n\t\t:param username: The username to get the latest posts from.\n\t\t:return: A object with list of posts and a list of comments (both with the previously mentioned properties), or an error message.\n\t\t\"\"\"\n\t\theaders = { \"User-Agent\": __user__[\"valves\"].USER_AGENT }\n\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Starting retrieval for u/{username}'s Reddit Feed...\", \"status\": \"in_progress\", \"done\": False }, \"type\": \"status\" })\n\n\t\tif username == \"\":\n\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Error: No username provided.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\treturn \"Error: No username provided.\"\n\t\tusername = username.replace(\"/u/\", \"\").replace(\"u/\", \"\")\n\n\t\tif not re.match(r\"^[A-Za-z0-9_]{3,20}$\", username):\n\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Error: Invalid username '{username}' (either too long or two short).\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\treturn \"Error: Invalid username.\"\n\n\t\ttry:\n\t\t\tresponse = requests.get(f\"https://reddit.com/u/{username}.json\", headers=headers)\n\n\t\t\tif not response.ok:\n\t\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Error: Failed to retrieve u/{username}'s Reddit Feed: {response.status_code}.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\t\treturn f\"Error: {response.status_code}\"\n\t\t\telse:\n\t\t\t\tpage = parse_reddit_page(response) # user pages can have both posts and comments.\n\t\t\t\tposts = parse_posts(page)\n\t\t\t\tcomments = parse_comments(page)\n\t\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Retrieved {len(posts)} posts and {len(comments)} comments from u/{username}'s Reddit Feed.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\t\treturn json.dumps({ \"posts\": posts, \"comments\": comments })\n\t\texcept Exception as e:\n\t\t\tawait __event_emitter__({ \"data\": { \"description\": f\"Failed to retrieve any posts from u/{username}'s Reddit Feed: {e}.\", \"status\": \"complete\", \"done\": True }, \"type\": \"status\" })\n\t\t\treturn f\"Error: {e}\"\n"},"downloads":3714,"upvotes":0,"downvotes":0,"updatedAt":1721610203,"createdAt":1721345171,"user":{"id":"f42a495c-f5f6-4187-85cb-3a07467d7b68","username":"nathanwindisch","name":"","profileImageUrl":"https://www.gravatar.com/avatar/3b9c8a5231c03306409dacb2f5db529e8565aade66070d4f6bac49f18d9e2954?d=mp","createdAt":1706497772}}]