[{"id":"0108b987-b0ce-4062-acfa-4800675ffdcb","userId":"e2309d83-d9b3-40fb-9d94-cba07a4a083e","tool":{"id":"knowledgebase_tools","name":"Knowledgebase tools","meta":{"description":"A tool for managing and rendering files with expanded features for better usability.","manifest":{"title":"Knowledgebase File Tools","author":"Wes Caldwell","email":"musicheardworldwide.com","author_url":"https://github.com/musicheardworldwide","version":"0.2.0","description":"A tool for managing and rendering files with expanded features for better usability."}},"content":"\"\"\"\ntitle: Knowledgebase File Tools\nauthor: Wes Caldwell\nemail: musicheardworldwide.com\nauthor_url: https://github.com/musicheardworldwide\nversion: 0.2.0\ndescription: A tool for managing and rendering files with expanded features for better usability.\n\"\"\"\n\nimport os\nimport requests\nimport logging\nfrom datetime import datetime\nfrom typing import List, Dict, Optional, Callable\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)\n\n\nclass Tools:\n    def __init__(self):\n        \"\"\"\n        Initializes the Tools class with default settings.\n        \"\"\"\n        # Enable or disable specific features\n        self.file_handler = True\n        self.citation = True\n\n    def get_files(self, __files__: List[dict] = []) -> str:\n        \"\"\"\n        Fetch the list of files and generate rendering instructions.\n        \"\"\"\n        logging.info(\"Fetching file list.\")\n        return (\n            \"\"\"Show the file content directly using: `/api/v1/files/{file_id}/content`\nIf the file is video content render the video directly using the following template: {{VIDEO_FILE_ID_[file_id]}}\nIf the file is HTML file render the HTML directly as iframe using the following template: {{HTML_FILE_ID_[file_id]}}\"\"\"\n            + f\"\\nFiles: {str(__files__)}\"\n        )\n\n    def upload_file(self, file_path: str) -> Dict[str, str]:\n        \"\"\"\n        Upload a file to the server.\n\n        Parameters:\n        - file_path (str): The path to the file to upload.\n\n        Returns:\n        - dict: The server response or an error message.\n        \"\"\"\n        url = \"/api/v1/files/\"\n        headers = {\"Authorization\": \"Bearer YOUR_API_KEY\"}\n        try:\n            with open(file_path, \"rb\") as file:\n                files = {\"file\": (os.path.basename(file_path), file)}\n                response = requests.post(url, headers=headers, files=files)\n                response.raise_for_status()\n                logging.info(f\"File uploaded successfully: {file_path}\")\n                return response.json()\n        except Exception as e:\n            logging.error(f\"Error uploading file: {str(e)}\")\n            return {\"error\": str(e)}\n\n    def delete_file(self, file_id: str) -> Dict[str, str]:\n        \"\"\"\n        Delete a file by its ID.\n\n        Parameters:\n        - file_id (str): The ID of the file to delete.\n\n        Returns:\n        - dict: The server response or an error message.\n        \"\"\"\n        url = f\"/api/v1/files/{file_id}\"\n        headers = {\"Authorization\": \"Bearer YOUR_API_KEY\"}\n        try:\n            response = requests.delete(url, headers=headers)\n            response.raise_for_status()\n            logging.info(f\"File {file_id} deleted successfully.\")\n            return {\n                \"status\": \"success\",\n                \"message\": f\"File {file_id} deleted successfully\",\n            }\n        except Exception as e:\n            logging.error(f\"Error deleting file: {str(e)}\")\n            return {\"error\": str(e)}\n\n    def search_files(self, query: str) -> List[dict]:\n        \"\"\"\n        Search files by query.\n\n        Parameters:\n        - query (str): The search query.\n\n        Returns:\n        - list: A list of files matching the query or an error message.\n        \"\"\"\n        url = \"/api/v1/files/search\"\n        params = {\"q\": query}\n        headers = {\"Authorization\": \"Bearer YOUR_API_KEY\"}\n        try:\n            response = requests.get(url, headers=headers, params=params)\n            response.raise_for_status()\n            logging.info(f\"Search completed for query: {query}\")\n            return response.json()\n        except Exception as e:\n            logging.error(f\"Error searching files: {str(e)}\")\n            return [{\"error\": str(e)}]\n\n    def render_file(self, file_id: str, file_type: str) -> str:\n        \"\"\"\n        Render files dynamically based on their type.\n\n        Parameters:\n        - file_id (str): The ID of the file.\n        - file_type (str): The type of the file (e.g., video, html, pdf, text).\n\n        Returns:\n        - str: The rendering template.\n        \"\"\"\n        templates = {\n            \"video\": f\"{{VIDEO_FILE_ID_{file_id}}}\",\n            \"html\": f\"{{HTML_FILE_ID_{file_id}}}\",\n            \"pdf\": f\"{{PDF_FILE_ID_{file_id}}}\",\n            \"text\": f\"{{TEXT_FILE_ID_{file_id}}}\",\n        }\n        return templates.get(file_type, f\"Unsupported file type: {file_type}\")\n\n    async def upload_with_progress(\n        self, file_path: str, __event_emitter__: Callable[[dict], None]\n    ):\n        \"\"\"\n        Upload a file with progress updates.\n\n        Parameters:\n        - file_path (str): The path to the file to upload.\n        - __event_emitter__ (Callable): An event emitter for sending real-time updates.\n        \"\"\"\n        await __event_emitter__({\"status\": \"start\", \"description\": \"Uploading file...\"})\n        result = self.upload_file(file_path)\n        if \"error\" in result:\n            await __event_emitter__({\"status\": \"error\", \"description\": result[\"error\"]})\n        else:\n            await __event_emitter__(\n                {\"status\": \"success\", \"description\": \"File uploaded successfully.\"}\n            )\n\n    def add_to_collection(self, collection_id: str, file_id: str) -> Dict[str, str]:\n        \"\"\"\n        Add a file to a collection.\n\n        Parameters:\n        - collection_id (str): The ID of the collection.\n        - file_id (str): The ID of the file.\n\n        Returns:\n        - dict: The server response or an error message.\n        \"\"\"\n        url = f\"/api/v1/knowledge/{collection_id}/file/add\"\n        headers = {\"Authorization\": \"Bearer YOUR_API_KEY\"}\n        try:\n            response = requests.post(url, headers=headers, json={\"file_id\": file_id})\n            response.raise_for_status()\n            logging.info(f\"File {file_id} added to collection {collection_id}.\")\n            return response.json()\n        except Exception as e:\n            logging.error(f\"Error adding file to collection: {str(e)}\")\n            return {\"error\": str(e)}\n\n\n# Example usage\nif __name__ == \"__main__\":\n    tools = Tools()\n    files = tools.get_files([{\"id\": \"123\", \"name\": \"example.txt\"}])\n    print(\"Available Files:\", files)\n\n    upload_result = tools.upload_file(\"example.txt\")\n    print(\"Upload Result:\", upload_result)\n\n    search_result = tools.search_files(\"example\")\n    print(\"Search Result:\", search_result)\n"},"downloads":644,"upvotes":0,"downvotes":0,"updatedAt":1736593372,"createdAt":1736593372,"user":{"id":"e2309d83-d9b3-40fb-9d94-cba07a4a083e","username":"sinaimhw","name":"","profileImageUrl":"https://www.gravatar.com/avatar/8bb2f0a290d958afa5df9b7239e0c9265dd82678a784a995e60132b7ca62d311?d=mp","createdAt":1718365072}}]