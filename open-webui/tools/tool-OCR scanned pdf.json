[{"id":"a97189ac-084a-45a7-b4d3-e400ea7ca6d7","userId":"8d1fefd6-a86f-4595-9451-436a956b8bb7","tool":{"id":"ocr_scanned_pdf","name":"OCR scanned pdf","meta":{"description":"This application will convert PDFs into images, generate missing alt text using OCR, and allow easy integration as a component for PDF processing. This tool can be enhanced further by customizing OCR languages and adding error handling or status updates as required.","manifest":{}},"content":"import os\nimport requests\nfrom datetime import datetime\nimport fitz  # PyMuPDF\nimport pytesseract\nfrom PIL import Image\nfrom open_webui.apps.webui.models.tools import ToolForm, ToolModel, ToolResponse, Tools\nfrom open_webui.apps.webui.models.users import Users\nfrom pathlib import Path\nfrom typing import Optional\nfrom open_webui.apps.webui.models.tools import ToolForm, ToolModel, ToolResponse, Tools\nfrom open_webui.apps.webui.utils import load_toolkit_module_by_id, replace_imports\nfrom open_webui.config import CACHE_DIR, DATA_DIR\nfrom typing import Optional\n\nfrom open_webui.apps.webui.models.models import (\n    ModelForm,\n    ModelModel,\n    ModelResponse,\n    Models,\n)\nfrom open_webui.constants import ERROR_MESSAGES\nfrom fastapi import APIRouter, Depends, HTTPException, Request, status\nfrom open_webui.utils.utils import get_admin_user, get_verified_user\n\n\nclass Tools:\n    def __init__(self):\n        # Specify the Tesseract-OCR executable path\n        pytesseract.pytesseract.tesseract_cmd = r\"C://Users//muhammad.tayyab//AppData//Local//Programs//Tesseract-OCR//tesseract.exe\"\n\n    def get_user_name_and_email_and_id(self, __user__: dict = {}) -> str:\n        \"\"\"\n        Get the user name, Email and ID from the user object.\n        \"\"\"\n        print(__user__)\n        result = \"\"\n\n        if \"name\" in __user__:\n            result += f\"User: {__user__['name']}\"\n        if \"id\" in __user__:\n            result += f\" (ID: {__user__['id']})\"\n        if \"email\" in __user__:\n            result += f\" (Email: {__user__['email']})\"\n\n        if result == \"\":\n            result = \"User: Unknown\"\n\n        return result\n\n    def get_current_time(self) -> str:\n        \"\"\"\n        Get the current time in a more human-readable format.\n        :return: The current time.\n        \"\"\"\n        now = datetime.now()\n        current_time = now.strftime(\"%I:%M:%S %p\")\n        current_date = now.strftime(\"%A, %B %d, %Y\")\n        return f\"Current Date and Time = {current_date}, {current_time}\"\n\n    def calculator(self, equation: str) -> str:\n        \"\"\"\n        Calculate the result of an equation.\n        :param equation: The equation to calculate.\n        \"\"\"\n        try:\n            result = eval(equation)\n            return f\"{equation} = {result}\"\n        except Exception as e:\n            print(e)\n            return \"Invalid equation\"\n\n    def get_current_weather(self, city: str) -> str:\n        \"\"\"\n        Get the current weather for a given city.\n        :param city: The name of the city to get the weather for.\n        :return: The current weather information or an error message.\n        \"\"\"\n        api_key = os.getenv(\"OPENWEATHER_API_KEY\")\n        if not api_key:\n            return (\n                \"API key is not set in the environment variable 'OPENWEATHER_API_KEY'.\"\n            )\n\n        base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n        params = {\n            \"q\": city,\n            \"appid\": api_key,\n            \"units\": \"metric\",\n        }\n\n        try:\n            response = requests.get(base_url, params=params)\n            response.raise_for_status()\n            data = response.json()\n\n            if data.get(\"cod\") != 200:\n                return f\"Error fetching weather data: {data.get('message')}\"\n\n            weather_description = data[\"weather\"][0][\"description\"]\n            temperature = data[\"main\"][\"temp\"]\n            humidity = data[\"main\"][\"humidity\"]\n            wind_speed = data[\"wind\"][\"speed\"]\n\n            return f\"Weather in {city}: {temperature}Â°C\"\n        except requests.RequestException as e:\n            return f\"Error fetching weather data: {str(e)}\"\n\n    def extract_text_from_pdf(self, pdf_path: str) -> str:\n        \"\"\"\n        Extract text from a scanned PDF file using OCR.\n        :param pdf_path: Path to the PDF file.\n        :return: Extracted text from the PDF.\n        \"\"\"\n        extracted_text = \"\"\n\n        try:\n            # Open the PDF file\n            pdf_document = fitz.open(pdf_path)\n\n            for page_num in range(len(pdf_document)):\n                # Get the page\n                page = pdf_document[page_num]\n                # Render the page to an image\n                pix = page.get_pixmap()\n                # Convert the image to a PIL Image\n                img = Image.frombytes(\"RGB\", [pix.width, pix.height], pix.samples)\n\n                # Use pytesseract to do OCR on the image\n                text = pytesseract.image_to_string(img)\n                extracted_text += f\"Page {page_num + 1}:\\n{text}\\n\\n\"\n\n            pdf_document.close()\n        except Exception as e:\n            return f\"Error extracting text from PDF: {str(e)}\"\n\n        return extracted_text.strip()  # Return extracted text without trailing spaces\n\n\n# Example of usage\nif __name__ == \"__main__\":\n    tools = Tools()\n    upload_directory = \"/app/backend/data/uploads/\"\n\n    # List all PDF files in the upload directory\n    for filename in os.listdir(upload_directory):\n        if filename.endswith(\".pdf\"):\n            pdf_path = os.path.join(upload_directory, filename)\n            extracted_text = tools.extract_text_from_pdf(pdf_path)\n            print(f\"Extracted text from {filename}:\\n{extracted_text}\\n{'-' * 40}\\n\")\n"},"downloads":5762,"upvotes":0,"downvotes":0,"updatedAt":1730304545,"createdAt":1730220803,"user":{"id":"8d1fefd6-a86f-4595-9451-436a956b8bb7","username":"medrpa","name":"","profileImageUrl":"https://www.gravatar.com/avatar/54c73e64b072fe40be6169484c2823cbb65fc51e9dea0715e41e9a2a17a353bb?d=mp","createdAt":1730216044}}]